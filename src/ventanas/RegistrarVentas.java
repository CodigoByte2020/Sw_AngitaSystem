package ventanas;

import clases.Conexión;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.sql.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

public class RegistrarVentas extends javax.swing.JFrame {

    public static int cantidad;
    public static float precio;
    String usuario, NombreProducto, marca;
    int ID_Producto, ID_Cliente;

    public RegistrarVentas() {

        initComponents();
        usuario = Login.usuario;

        setTitle("Registro de venta - Sesión de " + usuario);
        txtVentaRealizadaPor.setText(usuario);
        cmbNombreProducto.addItem("Selecciona un producto");
        rbtnContado.setSelected(true);
        setResizable(false);
        setLocationRelativeTo(null);
        setSize(520, 500);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon ImagenFondo = new ImageIcon("src/images/fondo.jpg");
        Icon IconoFondo = new ImageIcon(ImagenFondo.getImage().getScaledInstance(lblFondo.getWidth(), lblFondo.getHeight(),
                Image.SCALE_DEFAULT));
        lblFondo.setIcon(IconoFondo);
        this.repaint();

        //Hacemos la consulta a la base de datos para cargar la información de los ComboBox
        try {
            Connection conexión = Conexión.Conexión_BD();
            PreparedStatement consulta = conexión.prepareStatement(
                    "select nombre_producto from productos");
            ResultSet ResultadoConsulta = consulta.executeQuery();

            if (ResultadoConsulta.next() == true) {

                do {
                    cmbNombreProducto.addItem(ResultadoConsulta.getString("nombre_producto"));
                } while (ResultadoConsulta.next() == true);

            } else {
                JOptionPane.showMessageDialog(null, "No hay productos registrados");
                conexión.close();
            }

            PreparedStatement consulta2 = conexión.prepareStatement(
                    "select nombre_cliente from clientes");
            ResultSet ResultadoConsulta2 = consulta2.executeQuery();

            if (ResultadoConsulta2.next() == true) {

                do {
                    cmbNombreCliente.addItem(ResultadoConsulta2.getString("nombre_cliente"));
                } while (ResultadoConsulta2.next() == true);

            } else {
                JOptionPane.showMessageDialog(null, "No hay clientes registrados");
                conexión.close();
            }
            conexión.close();

        } catch (SQLException e) {
            System.err.println("ERROR al cargar datos de la interfaz. " + e);
            JOptionPane.showMessageDialog(null, "ERROR al cargar datos de la interfaz, contacte con el administrador");
        }
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icono.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngTipoVenta = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneObservaciones = new javax.swing.JTextPane();
        lblTítulo = new javax.swing.JLabel();
        lblNombreProducto = new javax.swing.JLabel();
        lblNombreCliente = new javax.swing.JLabel();
        cmbNombreCliente = new javax.swing.JComboBox<>();
        lblTipoVenta = new javax.swing.JLabel();
        rbtnContado = new javax.swing.JRadioButton();
        rbtnCrédito = new javax.swing.JRadioButton();
        lblVentaRealizadaPor = new javax.swing.JLabel();
        txtVentaRealizadaPor = new javax.swing.JTextField();
        lblObservaciones = new javax.swing.JLabel();
        btnRegistrarVenta = new javax.swing.JButton();
        lblMarca = new javax.swing.JLabel();
        cmbMarca = new javax.swing.JComboBox<>();
        lblFooter = new javax.swing.JLabel();
        cmbNombreProducto = new javax.swing.JComboBox<>();
        lblStock = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        lblTotalPagar = new javax.swing.JLabel();
        txtTotalPagar = new javax.swing.JTextField();
        cmbCantidad = new javax.swing.JComboBox<>();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(jTextPaneObservaciones);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 310, 200, 100));

        lblTítulo.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblTítulo.setText("Registro de venta");
        getContentPane().add(lblTítulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        lblNombreProducto.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblNombreProducto.setText("Nombre del producto:");
        getContentPane().add(lblNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        lblNombreCliente.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblNombreCliente.setText("Nombre del cliente:");
        getContentPane().add(lblNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, -1, -1));

        getContentPane().add(cmbNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, 200, -1));

        lblTipoVenta.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblTipoVenta.setText("Tipo de venta:");
        getContentPane().add(lblTipoVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, -1, -1));

        btngTipoVenta.add(rbtnContado);
        rbtnContado.setText("Contado");
        getContentPane().add(rbtnContado, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, -1, -1));

        btngTipoVenta.add(rbtnCrédito);
        rbtnCrédito.setText("Crédito");
        getContentPane().add(rbtnCrédito, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, -1, -1));

        lblVentaRealizadaPor.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblVentaRealizadaPor.setText("Venta realizada por:");
        getContentPane().add(lblVentaRealizadaPor, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, -1, -1));

        txtVentaRealizadaPor.setEditable(false);
        txtVentaRealizadaPor.setBackground(new java.awt.Color(102, 153, 255));
        txtVentaRealizadaPor.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtVentaRealizadaPor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtVentaRealizadaPor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtVentaRealizadaPor, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 240, 200, -1));

        lblObservaciones.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblObservaciones.setText("Observaciones:");
        getContentPane().add(lblObservaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 280, -1, -1));

        btnRegistrarVenta.setBackground(new java.awt.Color(255, 153, 255));
        btnRegistrarVenta.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnRegistrarVenta.setText("Registrar Venta");
        btnRegistrarVenta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, 150, 35));

        lblMarca.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblMarca.setText("Marca:");
        getContentPane().add(lblMarca, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        cmbMarca.setEnabled(false);
        cmbMarca.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMarcaItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbMarca, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 200, -1));

        lblFooter.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        lblFooter.setText("Desarrollado por CódigoByte © - Gianmarco Contreras Pumamango");
        getContentPane().add(lblFooter, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, -1, -1));

        cmbNombreProducto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNombreProductoItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 200, -1));

        lblStock.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblStock.setText("Cantidad:");
        getContentPane().add(lblStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        lblPrecio.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblPrecio.setText("Precio unitario (S/.)");
        getContentPane().add(lblPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 130, -1));

        txtPrecio.setEditable(false);
        getContentPane().add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 60, -1));

        lblTotalPagar.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblTotalPagar.setText("Total a pagar (S/.)");
        getContentPane().add(lblTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 130, -1));

        txtTotalPagar.setEditable(false);
        getContentPane().add(txtTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 120, -1));

        cmbCantidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cmbCantidad.setEnabled(false);
        cmbCantidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCantidadItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 50, -1));
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarVentaActionPerformed

        if (!txtTotalPagar.getText().equals("")) {

            String NombreCliente, observaciones, TipoVenta = "";
            int DíaVenta, MesVenta, AnnioVenta;
            Calendar calendario = Calendar.getInstance(); //Cuando la clase es abstracta no se debe instanciar

            DíaVenta = calendario.get(Calendar.DATE);
            MesVenta = calendario.get(Calendar.MONTH) + 1;
            AnnioVenta = calendario.get(Calendar.YEAR);

            NombreCliente = cmbNombreCliente.getSelectedItem().toString();
            observaciones = jTextPaneObservaciones.getText();

            if (rbtnContado.isSelected()) {
                TipoVenta = "Contado";
            } else if (rbtnCrédito.isSelected()) {
                TipoVenta = "Crédito";
            }

            try {

                //Según el nombre y la marca del producto ingresado, obtenemos el ID_Producto y el stock
                int cantidad_BD = 0;
                Connection conexión2 = Conexión.Conexión_BD();
                PreparedStatement consulta1 = conexión2.prepareStatement(
                        "select id_producto, stock from productos where nombre_producto = ? and marca = ?");
                consulta1.setString(1, NombreProducto);
                consulta1.setString(2, marca);
                ResultSet ResultadoConsulta1 = consulta1.executeQuery();

                if (ResultadoConsulta1.next() == true) {
                    ID_Producto = ResultadoConsulta1.getInt("id_producto");
                    cantidad_BD = ResultadoConsulta1.getInt("stock");
                }

                if (cantidad_BD > 0) { //Producto disponible

                    if (cantidad_BD >= cantidad) { //Se realiza la venta

                        //Según el nombre del cliente ingresado, obtenemos el ID_Cliente y la deuda
                        float deuda = 0;
                        PreparedStatement consulta2 = conexión2.prepareStatement(
                                "select id_cliente, deuda from clientes where nombre_cliente = ?");
                        consulta2.setString(1, NombreCliente);
                        ResultSet ResultadoConsulta2 = consulta2.executeQuery();

                        if (ResultadoConsulta2.next() == true) {
                            ID_Cliente = ResultadoConsulta2.getInt("id_cliente");
                            deuda = ResultadoConsulta2.getFloat("deuda");
                        }

                        //Insertamos todos los datos en la tabla ventas
                        PreparedStatement consulta3 = conexión2.prepareStatement(
                                "insert into ventas values (?,?,?,?,?,?,?,?,?)");
                        consulta3.setInt(1, 0);
                        consulta3.setInt(2, ID_Producto);
                        consulta3.setInt(3, ID_Cliente);
                        consulta3.setInt(4, DíaVenta);
                        consulta3.setInt(5, MesVenta);
                        consulta3.setInt(6, AnnioVenta);
                        consulta3.setString(7, TipoVenta);
                        consulta3.setString(8, usuario);
                        consulta3.setString(9, observaciones);
                        consulta3.executeUpdate();

                        //Insertamos todos los datos en la tabla DetalleVentas
                        PreparedStatement consulta4 = conexión2.prepareStatement(
                                "insert into detalle_ventas values (?,?,?,?,?,?,?,?,?,?,?,?)");
                        consulta4.setInt(1, 0);
                        consulta4.setInt(2, ID_Cliente);
                        consulta4.setString(3, NombreProducto);
                        consulta4.setString(4, marca);
                        consulta4.setFloat(5, precio);
                        consulta4.setInt(6, cantidad);
                        consulta4.setFloat(7, precio * cantidad);
                        consulta4.setInt(8, DíaVenta);
                        consulta4.setInt(9, MesVenta);
                        consulta4.setInt(10, AnnioVenta);
                        consulta4.setString(11, TipoVenta);
                        consulta4.setString(12, usuario);
                        consulta4.executeUpdate();

                        //Actualizamos el stock del producto vendido                    
                        PreparedStatement consulta5 = conexión2.prepareStatement(
                                "update productos set stock = ? where id_producto = ?");
                        consulta5.setInt(1, cantidad_BD - cantidad);
                        consulta5.setInt(2, ID_Producto);
                        consulta5.executeUpdate();

                        //Actualizamos la deuda del cliente al que se le dio crédito
                        if (TipoVenta.equals("Crédito")) {
                            PreparedStatement consulta6 = conexión2.prepareStatement(
                                    "update clientes set deuda = ? where id_cliente = ?");
                            consulta6.setFloat(1, deuda + (precio * cantidad));
                            consulta6.setInt(2, ID_Cliente);
                            consulta6.executeUpdate();
                        }

                        Iluminar();
                        JOptionPane.showMessageDialog(null, "Registro exitoso");
                        conexión2.close();
                        this.dispose();

                    } else if (cantidad_BD < cantidad) {
                        JOptionPane.showMessageDialog(null, "Lo sentimos, actualmente sólo nos queda: "
                                + cantidad_BD + " unidad(es) de " + NombreProducto + " " + marca);
                    }

                } else if (cantidad_BD == 0) {
                    JOptionPane.showMessageDialog(null, "Producto agotado !!!");
                }

            } catch (SQLException e) {
                System.err.println("ERROR al registrar venta. " + e);
                JOptionPane.showMessageDialog(null, "ERROR al registrar venta, contacte con el administrador");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");
        }
    }//GEN-LAST:event_btnRegistrarVentaActionPerformed

    //Creamos un ArrayList para almacenar las marcas registradas en la base de datos
    private void cmbNombreProductoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbNombreProductoItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            List<String> Marcas = new ArrayList<>();

            if (cmbNombreProducto.getSelectedIndex() > 0) {

                cmbMarca.setEnabled(true);
                cmbMarca.removeAllItems();
                cmbMarca.addItem("Selecciona una marca");
                NombreProducto = cmbNombreProducto.getSelectedItem().toString();
                Marcas.clear();

                try {

                    Connection conexión = Conexión.Conexión_BD();
                    PreparedStatement consulta = conexión.prepareStatement(
                            "select marca from productos where nombre_producto = ?");
                    consulta.setString(1, NombreProducto);
                    ResultSet ResultadoConsulta = consulta.executeQuery();

                    if (ResultadoConsulta.next() == true) {

                        do {
                            Marcas.add(ResultadoConsulta.getString("marca"));
                        } while (ResultadoConsulta.next() == true);

                        for (int i = 0; i < Marcas.size(); i += 1) {
                            cmbMarca.addItem(Marcas.get(i));
                        }
                    }

                } catch (SQLException e) {
                    System.err.println("ERROR al consultar las marcas. " + e);
                    JOptionPane.showMessageDialog(null, "ERROR al consultar las marcas, contacte con el administrador.");
                }

                //Reiniciamos todos los controles, variables y objetos
            } else if (cmbNombreProducto.getSelectedIndex() == 0) {

                cmbMarca.setEnabled(false);
                cmbMarca.removeAllItems();
                txtPrecio.setText("");
                precio = 0;
                cmbCantidad.setSelectedIndex(0);
                cmbCantidad.setEnabled(false);
                cantidad = 0;
                txtTotalPagar.setText("");
                Marcas.clear();
            }
        }
    }//GEN-LAST:event_cmbNombreProductoItemStateChanged

    //Hacemos la consulta a la BD para obtener el precio del producto que conincide con los parámetros enviados
    private void cmbMarcaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMarcaItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            //Obtenemos la marca y cantidad para hallar el Total a pagar
            if (cmbMarca.getSelectedIndex() > 0) {

                marca = cmbMarca.getSelectedItem().toString();
                cantidad = cmbCantidad.getSelectedIndex() + 1;
                cmbCantidad.setEnabled(true);

                try {

                    Connection conexión = Conexión.Conexión_BD();
                    PreparedStatement consulta = conexión.prepareStatement(
                            "select precio from productos where nombre_producto = ? and marca = ?");
                    consulta.setString(1, NombreProducto);
                    consulta.setString(2, marca);
                    ResultSet ResultadoConsulta = consulta.executeQuery();

                    if (ResultadoConsulta.next() == true) {
                        precio = ResultadoConsulta.getFloat("precio");
                        txtPrecio.setText(String.valueOf(precio));
                        txtTotalPagar.setText(String.valueOf(precio * cantidad));
                    }

                } catch (SQLException e) {
                    System.err.println("ERROR al consultar el precio. " + e);
                    JOptionPane.showMessageDialog(null, "ERROR al consultar el precio, contacte con el administrador.");
                }

                //Reiniciamos algunos controles y variables
            } else if (cmbMarca.getSelectedIndex() == 0) {
                txtPrecio.setText("");
                precio = 0;
                cmbCantidad.setSelectedIndex(0);
                cmbCantidad.setEnabled(false);
                cantidad = 0;
                txtTotalPagar.setText("");
            }
        }
    }//GEN-LAST:event_cmbMarcaItemStateChanged

    private void cmbCantidadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCantidadItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            cantidad = cmbCantidad.getSelectedIndex() + 1;
            txtTotalPagar.setText(Float.toString(precio * cantidad));
        }
    }//GEN-LAST:event_cmbCantidadItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrarVenta;
    private javax.swing.ButtonGroup btngTipoVenta;
    private javax.swing.JComboBox<String> cmbCantidad;
    private javax.swing.JComboBox<String> cmbMarca;
    private javax.swing.JComboBox<String> cmbNombreCliente;
    private javax.swing.JComboBox<String> cmbNombreProducto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPaneObservaciones;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblFooter;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblNombreProducto;
    private javax.swing.JLabel lblObservaciones;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblStock;
    private javax.swing.JLabel lblTipoVenta;
    private javax.swing.JLabel lblTotalPagar;
    private javax.swing.JLabel lblTítulo;
    private javax.swing.JLabel lblVentaRealizadaPor;
    private javax.swing.JRadioButton rbtnContado;
    private javax.swing.JRadioButton rbtnCrédito;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtTotalPagar;
    private javax.swing.JTextField txtVentaRealizadaPor;
    // End of variables declaration//GEN-END:variables

    public void Iluminar() {

        cmbNombreCliente.setBackground(Color.green);
        cmbNombreProducto.setBackground(Color.green);
        cmbMarca.setBackground(Color.green);
        cmbCantidad.setBackground(Color.green);
        txtPrecio.setBackground(Color.green);
        txtTotalPagar.setBackground(Color.green);
        txtVentaRealizadaPor.setBackground(Color.green);
        jTextPaneObservaciones.setBackground(Color.green);

        if (rbtnContado.isSelected()) {
            rbtnContado.setBackground(Color.green);
        } else if (rbtnCrédito.isSelected()) {
            rbtnCrédito.setBackground(Color.green);
        }
    }
}
