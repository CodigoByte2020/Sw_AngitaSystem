package ventanas;

import clases.Conexión;
import java.sql.*;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

public class InformacionClientes extends javax.swing.JFrame {

    DefaultTableModel modelo = new DefaultTableModel();

    public static int ID_Venta;
    //public static int ID_Producto;
    int ID_ClienteConsultado, cantidad;
//    float precio;
    String usuario;

    public InformacionClientes() {

        initComponents();
        ID_ClienteConsultado = GestionarClientes.ID_ClienteConsultado;
        usuario = Login.usuario;
        cantidad = RegistrarVentas.cantidad;
//        precio = RegistrarVentas.precio;

        setSize(530, 450);
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon ImagenFondo = new ImageIcon("src/images/fondo.jpg");
        Icon IconoFondo = new ImageIcon(ImagenFondo.getImage().getScaledInstance(lblFondo.getWidth(), lblFondo.getHeight(),
                Image.SCALE_DEFAULT));
        lblFondo.setIcon(IconoFondo);
        this.repaint();

        try {
            Connection conexión = Conexión.Conexión_BD();
            PreparedStatement consulta = conexión.prepareStatement(
                    "select * from clientes where id_cliente = ?");
            consulta.setInt(1, ID_ClienteConsultado);
            ResultSet ResultadoConsulta = consulta.executeQuery();

            if (ResultadoConsulta.next() == true) {
                setTitle("Información del cliente " + ResultadoConsulta.getString(2) + " - Sesión de " + usuario);
                lblTítulo.setText("Información del cliente " + ResultadoConsulta.getString(2));

                txtNombre.setText(ResultadoConsulta.getString(2));
                txtEmail.setText(ResultadoConsulta.getString(3));
                /*También podemos recuperar este valor directamente como String
                txtCelular.setText(ResultadoConsulta.getString(4));*/
                txtCelular.setText(String.valueOf(ResultadoConsulta.getInt(4))); 
                txtDirección.setText(ResultadoConsulta.getString(5));
                txtÚltimaModificación.setText(ResultadoConsulta.getString(6));
                txtDeuda.setText(String.valueOf(ResultadoConsulta.getFloat(7))); //?
            }
            conexión.close();

        } catch (SQLException e) {
            System.err.println("ERROR al cargar datos del cliente. " + e);
            JOptionPane.showMessageDialog(null, "ERROR al cargar datos del cliente, contacte con el administrador");
        }
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icono.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTítulo = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblCelular = new javax.swing.JLabel();
        txtCelular = new javax.swing.JTextField();
        lblDirección = new javax.swing.JLabel();
        txtDirección = new javax.swing.JTextField();
        lblDeuda = new javax.swing.JLabel();
        txtDeuda = new javax.swing.JTextField();
        lblÚltimaModificación = new javax.swing.JLabel();
        txtÚltimaModificación = new javax.swing.JTextField();
        btnActualizarCliente = new javax.swing.JButton();
        btnImprimirReporte = new javax.swing.JButton();
        lblFooter = new javax.swing.JLabel();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTítulo.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblTítulo.setText("Información del cliente");
        getContentPane().add(lblTítulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        lblNombre.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblNombre.setText("Modificado por:");
        getContentPane().add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, -1, -1));

        txtNombre.setBackground(new java.awt.Color(102, 153, 255));
        txtNombre.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 200, -1));

        lblEmail.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblEmail.setText("Em@il:");
        getContentPane().add(lblEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        txtEmail.setBackground(new java.awt.Color(102, 153, 255));
        txtEmail.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtEmail.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 200, -1));

        lblCelular.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblCelular.setText("Celular:");
        getContentPane().add(lblCelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        txtCelular.setBackground(new java.awt.Color(102, 153, 255));
        txtCelular.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtCelular.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCelular.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtCelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 200, -1));

        lblDirección.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblDirección.setText("Dirección:");
        getContentPane().add(lblDirección, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        txtDirección.setBackground(new java.awt.Color(102, 153, 255));
        txtDirección.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtDirección.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDirección.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtDirección, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 200, -1));

        lblDeuda.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblDeuda.setText("Deuda:");
        getContentPane().add(lblDeuda, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, -1, -1));

        txtDeuda.setEditable(false);
        txtDeuda.setBackground(new java.awt.Color(102, 153, 255));
        txtDeuda.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtDeuda.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDeuda.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtDeuda, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, 120, -1));

        lblÚltimaModificación.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblÚltimaModificación.setText("Nombre:");
        getContentPane().add(lblÚltimaModificación, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        txtÚltimaModificación.setEditable(false);
        txtÚltimaModificación.setBackground(new java.awt.Color(102, 153, 255));
        txtÚltimaModificación.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtÚltimaModificación.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtÚltimaModificación.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        getContentPane().add(txtÚltimaModificación, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 210, -1));

        btnActualizarCliente.setBackground(new java.awt.Color(255, 153, 255));
        btnActualizarCliente.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnActualizarCliente.setText("Actualizar Cliente");
        btnActualizarCliente.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnActualizarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarClienteActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 120, 40));

        btnImprimirReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icono_pdf.png"))); // NOI18N
        btnImprimirReporte.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnImprimirReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirReporteActionPerformed(evt);
            }
        });
        getContentPane().add(btnImprimirReporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 100, 100));

        lblFooter.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        lblFooter.setText("Desarrollado por CódigoByte © - Gianmarco Contreras Pumamango");
        getContentPane().add(lblFooter, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, -1, -1));
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarClienteActionPerformed
        String nombre, email, dirección;
        int validación = 0, celular = 0;

        nombre = txtNombre.getText().trim();
        email = txtEmail.getText().trim();
        dirección = txtDirección.getText().trim();
        txtÚltimaModificación.setText(usuario);

        if (nombre.equals("")) {
            txtNombre.setBackground(Color.red);
            validación += 1;
        }
        if (email.equals("")) {
            txtEmail.setBackground(Color.red);
            validación += 1;
        }
        if (dirección.equals("")) {
            txtDirección.setBackground(Color.red);
            validación += 1;
        }
        if (txtCelular.getText().equals("")) {
            txtCelular.setBackground(Color.red);
            validación += 1;
        } else {
            celular = Integer.parseInt(txtCelular.getText());
        }

        if (validación == 0) {

            try {
                Connection conexión = Conexión.Conexión_BD();
                PreparedStatement consulta = conexión.prepareStatement(
                        "update clientes set nombre_cliente = ?, email_cliente = ?, cel_cliente = ?, dir_cliente = ?, "
                        + "ultima_modificacion = ? where id_cliente = ?");

                consulta.setString(1, nombre);
                consulta.setString(2, email);
                consulta.setInt(3, celular);
                consulta.setString(4, dirección);
                consulta.setString(5, usuario);
                consulta.setInt(6, ID_ClienteConsultado);
                consulta.executeUpdate();
                conexión.close();

                Iluminar();
                JOptionPane.showMessageDialog(null, "Actualización exitosa");
                this.dispose();

            } catch (SQLException e) {
                System.err.println("ERROR al actualizar cliente. " + e);
                JOptionPane.showMessageDialog(null, "ERROR al actualizar cliente, contacte con el administrador");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");
        }
    }//GEN-LAST:event_btnActualizarClienteActionPerformed

    private void btnImprimirReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirReporteActionPerformed

        Document documento = new Document();

        try {
            //Establecemos la ruta donde queremos que se cree el documento pdf
            String ruta = System.getProperty("user.home");
            PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Desktop/" + txtNombre.getText().trim() + ".pdf"));

            //Creamos la imagen del documento pdf
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("src/images/BannerPDF.jpg");
            header.setAlignment(Chunk.ALIGN_CENTER);
            header.scaleToFit(650, 1000);

            //Creamos el primer párrafo del documento pdf
            Paragraph párrafo = new Paragraph();
            párrafo.setAlignment(Paragraph.ALIGN_CENTER);
            //Modificar la fuente antes de agregar el texto al párrafo
            párrafo.setFont(FontFactory.getFont("Cambria", 22, Font.BOLD, BaseColor.RED));
            párrafo.add("INFORMACIÓN DEL CLIENTE \n \n");

            documento.open();
            documento.add(header);
            documento.add(párrafo);

            //Creamos la TablaCliente y agregamos el nombre de cada columna
            PdfPTable TablaCliente = new PdfPTable(7);
            TablaCliente.addCell("IdCliente");
            TablaCliente.addCell("Nombre");
            TablaCliente.addCell("Email");
            TablaCliente.addCell("Celular");
            TablaCliente.addCell("Diección");
            TablaCliente.addCell("ÚltimaModificación");
            TablaCliente.addCell("Deuda");

            /*Hacemos la consulta a la base de datos y llenamos todos los campos de la TablaCliente, 
            luego agregamos esa TablaCliente al documento pdf*/
            try {
                Connection conexión = Conexión.Conexión_BD();
                PreparedStatement consulta = conexión.prepareStatement(
                        "select * from clientes where id_cliente = ?");
                consulta.setInt(1, ID_ClienteConsultado);
                ResultSet ResultadoConsulta = consulta.executeQuery();

                if (ResultadoConsulta.next() == true) {

                    for (int i = 0; i < 7; i++) {
                        TablaCliente.addCell(ResultadoConsulta.getString(i + 1));
                    }

                    documento.add(TablaCliente);
                }
                conexión.close();

            } catch (SQLException e) {
                System.err.println("ERROR al cargar información del cliente. " + e);
                JOptionPane.showMessageDialog(null, "ERROR al cargar información del cliente, contacte con el administrador");
            }

            Paragraph párrafo2 = new Paragraph();
            párrafo2.setAlignment(Paragraph.ALIGN_CENTER);
            párrafo2.setFont(FontFactory.getFont("Cambria", 22, Font.BOLD, BaseColor.RED));
            párrafo2.add("\n \n DETALLE VENTAS - CLIENTE \n \n");

            documento.add(párrafo2);

            //Creamos la tabla DetalleVenta y agregamos el nombre de cada columna
            PdfPTable TablaDetalleVenta = new PdfPTable(8);
            TablaDetalleVenta.addCell("IdVenta");
            TablaDetalleVenta.addCell("Producto");
            TablaDetalleVenta.addCell("Precio");
            TablaDetalleVenta.addCell("Cantidad");
            TablaDetalleVenta.addCell("PagoTotal");
            TablaDetalleVenta.addCell("FechaVenta");
            TablaDetalleVenta.addCell("TipoVenta");
            TablaDetalleVenta.addCell("VendidoPor");

            /*Hacemos la consulta a la base de datos y llenamos todos los campos de la Tabla DetalleVenta,
            luego agregamos la Tabla DetalleVenta al documento pdf*/
            try {
                Connection conexión = Conexión.Conexión_BD();
                PreparedStatement consulta = conexión.prepareStatement(
                        "select id_venta, nombre_producto, marca, precio, cantidad, total_pagar, dia_venta, "
                        + "mes_venta, annio_venta, tipo_venta, venta_realizada_por from detalle_ventas "
                        + "where id_cliente = ?");
                consulta.setInt(1, ID_ClienteConsultado);
                ResultSet ResultadoConsulta = consulta.executeQuery();

                if (ResultadoConsulta.next() == true) {

                    do {

                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("id_venta"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("nombre_producto") + " "
                                + ResultadoConsulta.getString("marca"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("precio"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("cantidad"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("total_pagar"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("dia_venta") + "/"
                                + ResultadoConsulta.getString("mes_venta") + "/"
                                + ResultadoConsulta.getString("annio_venta"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("tipo_venta"));
                        TablaDetalleVenta.addCell(ResultadoConsulta.getString("venta_realizada_por"));

                    } while (ResultadoConsulta.next() == true);

                    documento.add(TablaDetalleVenta);
                    conexión.close();

                }
            } catch (SQLException e) {
                System.err.println("ERROR al cargar información de los detalles de las ventas. " + e);
                JOptionPane.showMessageDialog(null, "ERROR al cargar información de los detalles de las ventas, "
                        + "contacte con el administrador");
            }

            documento.close();
            JOptionPane.showMessageDialog(null, "Archivo informativo del cliente, generado correctamente");

        } catch (DocumentException | IOException e) {
            System.err.println("ERROR al generar el archivo informativo del cliente o al cargar la imágen. " + e);
            JOptionPane.showMessageDialog(null, "ERROR al generar el archivo informativo del cliente, "
                    + "contacte con el administrador");
        }
    }//GEN-LAST:event_btnImprimirReporteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InformacionClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InformacionClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InformacionClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformacionClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformacionClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarCliente;
    private javax.swing.JButton btnImprimirReporte;
    private javax.swing.JLabel lblCelular;
    private javax.swing.JLabel lblDeuda;
    private javax.swing.JLabel lblDirección;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblFooter;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTítulo;
    private javax.swing.JLabel lblÚltimaModificación;
    private javax.swing.JTextField txtCelular;
    private javax.swing.JTextField txtDeuda;
    private javax.swing.JTextField txtDirección;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtÚltimaModificación;
    // End of variables declaration//GEN-END:variables

    public void Iluminar() {
        txtCelular.setBackground(Color.green);
        txtDeuda.setBackground(Color.green);
        txtDirección.setBackground(Color.green);
        txtEmail.setBackground(Color.green);
        txtNombre.setBackground(Color.green);
        txtÚltimaModificación.setBackground(Color.green);
    }
}
